//Các kỹ thuật liệt kê dưới đây là được Note lại từ Section 22 - 23
//Để tạo biến trong SCSS (Khai báo $tênbiến:giátrịbiến)
// $color1: red;
// //
// .demo {
//   color: $color1;
// }
//---------------------------------------------------------
//Kỹ thuật thứ 2: Gôm nhóm:
//---Tăng khả năng quản lý Code lên tối đa
/*
    .content{
            //Thuộc tính cho div có class content

        .left{
            //Thuộc tính cho div có class left nằm bên trong div có class content
        }
        .right{
            //Thuộc tính cho div có class right nằm bên trong div có class content
        }
    }
*/
//---------------------------------------------------------
//Kỹ thuật thứ 3: Gôm nhóm theo thuộc tính CSS:
/*
    Ví dụ:
            font: {
                size: $...;
                weight: bold;
                style: italic;
            }
*/
//---------------------------------------------------------
//Kỹ thuật thứ 4: Hover 1 thẻ nào đó đã bao gồm các thuộc
//tính khác rồi
/*
    Ví dụ:
            {thuộc tính đã css}
            &:hover{
                background-color: yellow;
            }
*/

//---------------------------------------------------------
//Kỹ thuật thứ 5: Gọi là Mixin
/*
    Về mặt ý nghĩa: Có thể xem nó như một function, nhưng tên
    chính xác của nó là Mixin;
    Ví dụ:
            @mixin centent()
            {
                //Thuộc tính có tính chất lặp đi lặp lại nhiều;
                background-color: red;
                width: 50%;
                text-align: center;
                color: white;
                padding: 50px 0;
            }
            //NOTE: thuộc tính nào trong mixin có gì khác nhau thì
            //cho nó một cái tham số
            //Ví dụ: background-color: red/blue tạo cho nó 1 cái biến
            //$bg_left:red;
            //$bg_right:blue;
            Xong thêm cho mixin tham số, content($bg_block);
            {
                background-color: bg_block;
                ...
                Các thuộc tính còn lại không thay đổi thì giữ nguyên;
            }
    //Cách gọi lại mixin đã tạo ra bằng từ khoá:
            @include content();
            hoặc @include content($bg_left);
            hoặc @include content(red);
*/
//---------------------------------------------------------
//Kỹ thuật thứ 6: Gọi là kế thừa @extend
/*
    Ví dụ có nhiều nút button, cùng giống nhau, thông thường
    sẽ đi copy phần code CSS lại và paste xuống vị trí của
    những nút cần css; bây giờ có extend rồi, thì chỉ cần
    .btn1{
        //Thuộc tính CSS;
    }
    Muốn .btn2 kế thừa được những thuộc tính của btn1:
    .btn2{
        @extend .btn1;
        ...có thể thêm các thuộc tính phía dưới;
        ...
    }
*/
//---------------------------------------------------------
//Kỹ thuật thứ 7: Đan xen if-else, for,...
/*
    $blockColor == blue;

    //Tiến hành so sánh:

    @if $blockColor == white {
        color: white;
    }
    @else if $blockColor == black {
        color: black;
    }
    @else
    {
        color: pink;
    }
    //Sau khi so sánh, kết quả trả về pink;
*/
//---------------------------------------------------------
//Kỹ thuật 7.1: Hướng dẫn chạy @for hiệu quả:
/*
    //Nếu dùng from 1 to 5, nó sẽ chạy <5
    //Nếu dùng from 1 through 5 nó sẽ chạy <=5

    @for $size from 1 through 5 {
        .heading-#{$size}{
            //Định nghĩa lại thuộc tính:
            font-size: 2rem * $size;
        }
    }

*/
//---------------------------------------------------------
//Kỹ thuật thứ 8: Tạo mảng - Xử lý nhanh những hiển thị có
//điểm chung giống nhau như 1 list các ảnh,... ngoài ảnh ra,
//còn có những cái thực chiến sẽ ngộ ra.
/*
    $socials: facebook youtube google;
    @each $item in $socials{
        .#{$item}{
            background-image: url("../image/#{$item}.png");
        }
    }
    1 mảng các ảnh, hoặc icoin (ở footer), có điểm chung là
    class và tên của ảnh;
*/
//---------------------------------------------------------
//Kỹ thuật thứ 9: Xử lý bổ trợ cho Responsive (Mình tự cho
//nó cái tên này)
/*
    Ví dụ:
    $cols: 4;
    @while $cols > 0 {
            .col-#{$cols}{
                width: 100% / $cols;
            }
            $cols: $cols - 1;
    }
    // => Tương tự như BS4: nó cũng sẽ tạo các col-1, ..., col-12,
*/
//---------------------------------------------------------
/*Sau các kỹ thuật anh Nguyên hướng dẫn, ảnh hướng dẫn tiếp
phần cấu trúc tổ chức thư mục, lí do sau khi Web càng ngày
càng phát triển, thì dữ liệu sẽ càng ngày càng lớn, nếu không
tổ chức cấu trúc thư mục, sau này sẽ rất khó quản lý;
=> SAU KHI TỔ CHỨC LẠI THƯ MỤC:
    + Phải liên kết các file lại với nhau bằng cách:
    @import "./Helpers/variable";
    //Note: Tại đây có 2 lưu ý:
        + 1 là khi import thì đầu tên không cần thêm dấu "_" phía trước;
        + 2 là cuối tên không cần ".scss";
        Nó tự hiểu! (Tự compile)
*/
//---------------------------------------------------------
/*
    Nối tiếp phần sau khi tổ chức thư mục cho Website, thì tại: stye.scss
    chỉ việc @import các scss còn lại vào thôi nhé, không có Code thêm vào
    trong đây, đã phân bổ nó ra để dễ quản lý mà!
    Note: Khi import phải nhớ thứ tự vì vẫn đang xử lý theo "hình tháp", từ
    trên xuống, phải import reset -> variable -> ...
    Chứ không có khai báo biến mà gọi nó ra là lỗi cả làng;
*/
.custumNav{
    
}